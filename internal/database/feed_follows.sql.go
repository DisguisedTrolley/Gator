// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted AS (
  INSERT INTO feed_follows (
    id, created_at, updated_at, user_id, feed_id
  ) VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
  )
  RETURNING id, user_id, feed_id
)
SELECT
  inserted.id,
  users.name AS user_name,
  feeds.name AS feed_name
FROM
  inserted
JOIN users ON inserted.user_id = users.id
JOIN feeds ON inserted.feed_id = feeds.id
`

type CreateFeedFollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

type CreateFeedFollowRow struct {
	ID       uuid.UUID
	UserName string
	FeedName string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.UserID, arg.FeedID)
	var i CreateFeedFollowRow
	err := row.Scan(&i.ID, &i.UserName, &i.FeedName)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT
    feed_follows.id,
    users.name AS user_name,
    feeds.name AS feed_name
FROM 
    feed_follows
JOIN users ON feed_follows.user_id = users.id
JOIN feeds ON feed_follows.feed_id = feeds.id
WHERE feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	ID       uuid.UUID
	UserName string
	FeedName string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.ID, &i.UserName, &i.FeedName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFeedForUser = `-- name: UnfollowFeedForUser :exec
DELETE FROM feed_follows
USING feeds
WHERE feed_follows.feed_id = feeds.id
  AND feed_follows.user_id = $1
  AND feeds.url = $2
`

type UnfollowFeedForUserParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) UnfollowFeedForUser(ctx context.Context, arg UnfollowFeedForUserParams) error {
	_, err := q.db.ExecContext(ctx, unfollowFeedForUser, arg.UserID, arg.Url)
	return err
}
